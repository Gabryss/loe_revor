<!--
  Example launch file for octomap_server mapping:
  Listens to incoming PointCloud2 data and incrementally builds an octomap.
  The data is sent out in different representations.

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details
-->
<launch>
	<node pkg="octomap_server" exec="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.05" />

		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" value="world" />

		<!-- The robot's base frame in which ground plane detection is performed -->
		<param name="base_frame_id" value="base_footprint" />

		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model.max_range" value="5.0" />

		<!-- Whether the ground plane should be detected and ignored from scan data when dynamically building a map, 
		using pcl::SACMODEL_PERPENDICULAR_PLANE. This clears everything up to the ground, but will not insert the ground as obstacle in the map. 
		If this is enabled, it can be further configured with the ~ground_filter/... parameters.  -->
		<param name="filter_ground" value="true" />

		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/point_cloud" />
	</node>
</launch>
